pub use mev_wallet_v1_factory::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod mev_wallet_v1_factory {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"type\":\"error\",\"name\":\"CreationFailed\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}],\"type\":\"error\",\"name\":\"InitFailed\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"Proxy\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"createWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static MEVWALLETV1FACTORY_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(|| {
        ::ethers::core::utils::__serde_json::from_str(__ABI)
            .expect("ABI is always valid")
    });
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        128,
        96,
        64,
        82,
        52,
        97,
        0,
        22,
        87,
        97,
        4,
        178,
        144,
        129,
        97,
        0,
        28,
        130,
        57,
        243,
        91,
        96,
        0,
        128,
        253,
        254,
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        21,
        97,
        0,
        18,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        53,
        96,
        224,
        28,
        128,
        99,
        15,
        99,
        4,
        24,
        20,
        97,
        0,
        145,
        87,
        99,
        29,
        100,
        118,
        5,
        20,
        97,
        0,
        51,
        87,
        96,
        0,
        128,
        253,
        91,
        52,
        97,
        0,
        142,
        87,
        96,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        252,
        54,
        1,
        18,
        97,
        0,
        142,
        87,
        96,
        32,
        97,
        0,
        112,
        51,
        96,
        4,
        53,
        97,
        2,
        177,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        96,
        64,
        81,
        145,
        22,
        129,
        82,
        243,
        91,
        128,
        253,
        91,
        80,
        52,
        97,
        0,
        142,
        87,
        96,
        64,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        252,
        54,
        1,
        18,
        97,
        0,
        142,
        87,
        96,
        36,
        53,
        144,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        144,
        129,
        131,
        22,
        131,
        3,
        97,
        0,
        142,
        87,
        80,
        97,
        0,
        243,
        96,
        32,
        146,
        96,
        4,
        53,
        97,
        2,
        177,
        86,
        91,
        96,
        64,
        81,
        145,
        22,
        129,
        82,
        243,
        91,
        80,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        144,
        96,
        31,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        145,
        1,
        22,
        129,
        1,
        144,
        129,
        16,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        23,
        97,
        1,
        109,
        87,
        96,
        64,
        82,
        86,
        91,
        97,
        1,
        117,
        97,
        0,
        252,
        86,
        91,
        96,
        64,
        82,
        86,
        91,
        96,
        64,
        81,
        144,
        96,
        32,
        130,
        1,
        130,
        129,
        16,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        23,
        97,
        1,
        109,
        87,
        96,
        64,
        82,
        86,
        91,
        145,
        144,
        96,
        32,
        128,
        132,
        1,
        147,
        96,
        0,
        144,
        91,
        96,
        1,
        130,
        16,
        97,
        1,
        180,
        87,
        80,
        80,
        80,
        80,
        86,
        91,
        130,
        128,
        96,
        1,
        146,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        135,
        81,
        22,
        129,
        82,
        1,
        148,
        1,
        145,
        1,
        144,
        146,
        97,
        1,
        166,
        86,
        91,
        61,
        21,
        97,
        2,
        70,
        87,
        61,
        144,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        97,
        2,
        57,
        87,
        91,
        96,
        64,
        81,
        145,
        97,
        2,
        45,
        96,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        132,
        1,
        22,
        1,
        132,
        97,
        1,
        44,
        86,
        91,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        86,
        91,
        97,
        2,
        65,
        97,
        0,
        252,
        86,
        91,
        97,
        1,
        247,
        86,
        91,
        96,
        96,
        144,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        130,
        81,
        129,
        131,
        1,
        129,
        144,
        82,
        147,
        146,
        96,
        0,
        91,
        133,
        129,
        16,
        97,
        2,
        157,
        87,
        80,
        80,
        80,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        132,
        96,
        0,
        96,
        64,
        128,
        150,
        151,
        134,
        1,
        1,
        82,
        1,
        22,
        1,
        1,
        144,
        86,
        91,
        129,
        129,
        1,
        131,
        1,
        81,
        132,
        130,
        1,
        96,
        64,
        1,
        82,
        130,
        1,
        97,
        2,
        93,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        32,
        129,
        1,
        146,
        131,
        82,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        132,
        22,
        129,
        131,
        1,
        82,
        129,
        129,
        82,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        147,
        145,
        146,
        144,
        97,
        3,
        10,
        96,
        96,
        130,
        97,
        1,
        44,
        86,
        91,
        81,
        144,
        32,
        96,
        50,
        131,
        81,
        127,
        61,
        96,
        40,
        128,
        96,
        10,
        61,
        57,
        129,
        243,
        54,
        61,
        61,
        55,
        61,
        61,
        61,
        54,
        61,
        110,
        192,
        135,
        24,
        113,
        139,
        151,
        77,
        100,
        75,
        9,
        140,
        25,
        129,
        82,
        127,
        189,
        0,
        100,
        90,
        244,
        61,
        130,
        128,
        62,
        144,
        61,
        145,
        96,
        38,
        87,
        253,
        91,
        243,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        32,
        130,
        1,
        82,
        96,
        0,
        245,
        146,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        132,
        22,
        21,
        97,
        4,
        124,
        87,
        96,
        0,
        145,
        130,
        145,
        97,
        3,
        166,
        97,
        3,
        138,
        97,
        1,
        122,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        144,
        147,
        22,
        131,
        82,
        86,
        91,
        97,
        3,
        237,
        133,
        81,
        145,
        130,
        97,
        3,
        225,
        96,
        32,
        130,
        1,
        149,
        127,
        196,
        214,
        109,
        232,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        135,
        82,
        96,
        36,
        131,
        1,
        97,
        1,
        154,
        86,
        91,
        3,
        144,
        129,
        1,
        131,
        82,
        130,
        97,
        1,
        44,
        86,
        91,
        81,
        144,
        130,
        134,
        90,
        241,
        97,
        3,
        251,
        97,
        1,
        223,
        86,
        91,
        144,
        21,
        97,
        4,
        68,
        87,
        80,
        81,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        22,
        129,
        82,
        126,
        112,
        195,
        179,
        124,
        189,
        51,
        168,
        249,
        16,
        51,
        167,
        73,
        165,
        229,
        52,
        168,
        110,
        220,
        140,
        42,
        76,
        97,
        85,
        185,
        197,
        62,
        153,
        255,
        213,
        148,
        55,
        144,
        96,
        32,
        144,
        161,
        144,
        86,
        91,
        97,
        4,
        120,
        145,
        81,
        145,
        130,
        145,
        127,
        34,
        93,
        10,
        88,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        131,
        82,
        96,
        4,
        131,
        1,
        97,
        2,
        75,
        86,
        91,
        3,
        144,
        253,
        91,
        96,
        4,
        131,
        81,
        127,
        215,
        134,
        211,
        147,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        253,
        254,
        161,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        10,
    ];
    ///The bytecode of the contract.
    pub static MEVWALLETV1FACTORY_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        96,
        4,
        54,
        16,
        21,
        97,
        0,
        18,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        53,
        96,
        224,
        28,
        128,
        99,
        15,
        99,
        4,
        24,
        20,
        97,
        0,
        145,
        87,
        99,
        29,
        100,
        118,
        5,
        20,
        97,
        0,
        51,
        87,
        96,
        0,
        128,
        253,
        91,
        52,
        97,
        0,
        142,
        87,
        96,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        252,
        54,
        1,
        18,
        97,
        0,
        142,
        87,
        96,
        32,
        97,
        0,
        112,
        51,
        96,
        4,
        53,
        97,
        2,
        177,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        96,
        64,
        81,
        145,
        22,
        129,
        82,
        243,
        91,
        128,
        253,
        91,
        80,
        52,
        97,
        0,
        142,
        87,
        96,
        64,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        252,
        54,
        1,
        18,
        97,
        0,
        142,
        87,
        96,
        36,
        53,
        144,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        144,
        129,
        131,
        22,
        131,
        3,
        97,
        0,
        142,
        87,
        80,
        97,
        0,
        243,
        96,
        32,
        146,
        96,
        4,
        53,
        97,
        2,
        177,
        86,
        91,
        96,
        64,
        81,
        145,
        22,
        129,
        82,
        243,
        91,
        80,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        144,
        96,
        31,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        145,
        1,
        22,
        129,
        1,
        144,
        129,
        16,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        23,
        97,
        1,
        109,
        87,
        96,
        64,
        82,
        86,
        91,
        97,
        1,
        117,
        97,
        0,
        252,
        86,
        91,
        96,
        64,
        82,
        86,
        91,
        96,
        64,
        81,
        144,
        96,
        32,
        130,
        1,
        130,
        129,
        16,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        23,
        97,
        1,
        109,
        87,
        96,
        64,
        82,
        86,
        91,
        145,
        144,
        96,
        32,
        128,
        132,
        1,
        147,
        96,
        0,
        144,
        91,
        96,
        1,
        130,
        16,
        97,
        1,
        180,
        87,
        80,
        80,
        80,
        80,
        86,
        91,
        130,
        128,
        96,
        1,
        146,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        135,
        81,
        22,
        129,
        82,
        1,
        148,
        1,
        145,
        1,
        144,
        146,
        97,
        1,
        166,
        86,
        91,
        61,
        21,
        97,
        2,
        70,
        87,
        61,
        144,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        17,
        97,
        2,
        57,
        87,
        91,
        96,
        64,
        81,
        145,
        97,
        2,
        45,
        96,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        132,
        1,
        22,
        1,
        132,
        97,
        1,
        44,
        86,
        91,
        130,
        82,
        61,
        96,
        0,
        96,
        32,
        132,
        1,
        62,
        86,
        91,
        97,
        2,
        65,
        97,
        0,
        252,
        86,
        91,
        97,
        1,
        247,
        86,
        91,
        96,
        96,
        144,
        86,
        91,
        96,
        32,
        128,
        130,
        82,
        130,
        81,
        129,
        131,
        1,
        129,
        144,
        82,
        147,
        146,
        96,
        0,
        91,
        133,
        129,
        16,
        97,
        2,
        157,
        87,
        80,
        80,
        80,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        132,
        96,
        0,
        96,
        64,
        128,
        150,
        151,
        134,
        1,
        1,
        82,
        1,
        22,
        1,
        1,
        144,
        86,
        91,
        129,
        129,
        1,
        131,
        1,
        81,
        132,
        130,
        1,
        96,
        64,
        1,
        82,
        130,
        1,
        97,
        2,
        93,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        32,
        129,
        1,
        146,
        131,
        82,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        132,
        22,
        129,
        131,
        1,
        82,
        129,
        129,
        82,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        147,
        145,
        146,
        144,
        97,
        3,
        10,
        96,
        96,
        130,
        97,
        1,
        44,
        86,
        91,
        81,
        144,
        32,
        96,
        50,
        131,
        81,
        127,
        61,
        96,
        40,
        128,
        96,
        10,
        61,
        57,
        129,
        243,
        54,
        61,
        61,
        55,
        61,
        61,
        61,
        54,
        61,
        110,
        192,
        135,
        24,
        113,
        139,
        151,
        77,
        100,
        75,
        9,
        140,
        25,
        129,
        82,
        127,
        189,
        0,
        100,
        90,
        244,
        61,
        130,
        128,
        62,
        144,
        61,
        145,
        96,
        38,
        87,
        253,
        91,
        243,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        32,
        130,
        1,
        82,
        96,
        0,
        245,
        146,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        132,
        22,
        21,
        97,
        4,
        124,
        87,
        96,
        0,
        145,
        130,
        145,
        97,
        3,
        166,
        97,
        3,
        138,
        97,
        1,
        122,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        144,
        147,
        22,
        131,
        82,
        86,
        91,
        97,
        3,
        237,
        133,
        81,
        145,
        130,
        97,
        3,
        225,
        96,
        32,
        130,
        1,
        149,
        127,
        196,
        214,
        109,
        232,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        135,
        82,
        96,
        36,
        131,
        1,
        97,
        1,
        154,
        86,
        91,
        3,
        144,
        129,
        1,
        131,
        82,
        130,
        97,
        1,
        44,
        86,
        91,
        81,
        144,
        130,
        134,
        90,
        241,
        97,
        3,
        251,
        97,
        1,
        223,
        86,
        91,
        144,
        21,
        97,
        4,
        68,
        87,
        80,
        81,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        130,
        22,
        129,
        82,
        126,
        112,
        195,
        179,
        124,
        189,
        51,
        168,
        249,
        16,
        51,
        167,
        73,
        165,
        229,
        52,
        168,
        110,
        220,
        140,
        42,
        76,
        97,
        85,
        185,
        197,
        62,
        153,
        255,
        213,
        148,
        55,
        144,
        96,
        32,
        144,
        161,
        144,
        86,
        91,
        97,
        4,
        120,
        145,
        81,
        145,
        130,
        145,
        127,
        34,
        93,
        10,
        88,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        131,
        82,
        96,
        4,
        131,
        1,
        97,
        2,
        75,
        86,
        91,
        3,
        144,
        253,
        91,
        96,
        4,
        131,
        81,
        127,
        215,
        134,
        211,
        147,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        253,
        254,
        161,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        10,
    ];
    ///The deployed bytecode of the contract.
    pub static MEVWALLETV1FACTORY_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct MevWalletV1Factory<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for MevWalletV1Factory<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for MevWalletV1Factory<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for MevWalletV1Factory<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for MevWalletV1Factory<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(MevWalletV1Factory)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> MevWalletV1Factory<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    MEVWALLETV1FACTORY_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                MEVWALLETV1FACTORY_ABI.clone(),
                MEVWALLETV1FACTORY_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `createWallet` (0x0f630418) function
        pub fn create_wallet_with_owner(
            &self,
            salt: [u8; 32],
            owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([15, 99, 4, 24], (salt, owner))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `createWallet` (0x1d647605) function
        pub fn create_wallet(
            &self,
            salt: [u8; 32],
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([29, 100, 118, 5], salt)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `Proxy` event
        pub fn proxy_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, ProxyFilter> {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<::std::sync::Arc<M>, M, ProxyFilter> {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for MevWalletV1Factory<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Custom Error type `CreationFailed` with signature `CreationFailed()` and selector `0xd786d393`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "CreationFailed", abi = "CreationFailed()")]
    pub struct CreationFailed;
    ///Custom Error type `InitFailed` with signature `InitFailed(bytes)` and selector `0x225d0a58`
    #[derive(
        Clone,
        ::ethers::contract::EthError,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[etherror(name = "InitFailed", abi = "InitFailed(bytes)")]
    pub struct InitFailed(pub ::ethers::core::types::Bytes);
    ///Container type for all of the contract's custom errors
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum MevWalletV1FactoryErrors {
        CreationFailed(CreationFailed),
        InitFailed(InitFailed),
        /// The standard solidity revert string, with selector
        /// Error(string) -- 0x08c379a0
        RevertString(::std::string::String),
    }
    impl ::ethers::core::abi::AbiDecode for MevWalletV1FactoryErrors {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <::std::string::String as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RevertString(decoded));
            }
            if let Ok(decoded)
                = <CreationFailed as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::CreationFailed(decoded));
            }
            if let Ok(decoded)
                = <InitFailed as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::InitFailed(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for MevWalletV1FactoryErrors {
        fn encode(self) -> ::std::vec::Vec<u8> {
            match self {
                Self::CreationFailed(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::InitFailed(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::RevertString(s) => ::ethers::core::abi::AbiEncode::encode(s),
            }
        }
    }
    impl ::ethers::contract::ContractRevert for MevWalletV1FactoryErrors {
        fn valid_selector(selector: [u8; 4]) -> bool {
            match selector {
                [0x08, 0xc3, 0x79, 0xa0] => true,
                _ if selector
                    == <CreationFailed as ::ethers::contract::EthError>::selector() => {
                    true
                }
                _ if selector
                    == <InitFailed as ::ethers::contract::EthError>::selector() => true,
                _ => false,
            }
        }
    }
    impl ::core::fmt::Display for MevWalletV1FactoryErrors {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::CreationFailed(element) => ::core::fmt::Display::fmt(element, f),
                Self::InitFailed(element) => ::core::fmt::Display::fmt(element, f),
                Self::RevertString(s) => ::core::fmt::Display::fmt(s, f),
            }
        }
    }
    impl ::core::convert::From<::std::string::String> for MevWalletV1FactoryErrors {
        fn from(value: String) -> Self {
            Self::RevertString(value)
        }
    }
    impl ::core::convert::From<CreationFailed> for MevWalletV1FactoryErrors {
        fn from(value: CreationFailed) -> Self {
            Self::CreationFailed(value)
        }
    }
    impl ::core::convert::From<InitFailed> for MevWalletV1FactoryErrors {
        fn from(value: InitFailed) -> Self {
            Self::InitFailed(value)
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "Proxy", abi = "Proxy(address)")]
    pub struct ProxyFilter(pub ::ethers::core::types::Address);
    ///Container type for all input parameters for the `createWallet` function with signature `createWallet(bytes32,address)` and selector `0x0f630418`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "createWallet", abi = "createWallet(bytes32,address)")]
    pub struct CreateWalletWithOwnerCall {
        pub salt: [u8; 32],
        pub owner: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `createWallet` function with signature `createWallet(bytes32)` and selector `0x1d647605`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "createWallet", abi = "createWallet(bytes32)")]
    pub struct CreateWalletCall {
        pub salt: [u8; 32],
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum MevWalletV1FactoryCalls {
        CreateWalletWithOwner(CreateWalletWithOwnerCall),
        CreateWallet(CreateWalletCall),
    }
    impl ::ethers::core::abi::AbiDecode for MevWalletV1FactoryCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <CreateWalletWithOwnerCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::CreateWalletWithOwner(decoded));
            }
            if let Ok(decoded)
                = <CreateWalletCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::CreateWallet(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for MevWalletV1FactoryCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::CreateWalletWithOwner(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::CreateWallet(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for MevWalletV1FactoryCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::CreateWalletWithOwner(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::CreateWallet(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<CreateWalletWithOwnerCall> for MevWalletV1FactoryCalls {
        fn from(value: CreateWalletWithOwnerCall) -> Self {
            Self::CreateWalletWithOwner(value)
        }
    }
    impl ::core::convert::From<CreateWalletCall> for MevWalletV1FactoryCalls {
        fn from(value: CreateWalletCall) -> Self {
            Self::CreateWallet(value)
        }
    }
    ///Container type for all return fields from the `createWallet` function with signature `createWallet(bytes32,address)` and selector `0x0f630418`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CreateWalletWithOwnerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `createWallet` function with signature `createWallet(bytes32)` and selector `0x1d647605`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct CreateWalletReturn(pub ::ethers::core::types::Address);
}
